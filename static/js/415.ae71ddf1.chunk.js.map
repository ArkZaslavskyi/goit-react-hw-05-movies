{"version":3,"file":"static/js/415.ae71ddf1.chunk.js","mappings":"gNAGaA,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,sHAOJE,EAAcF,EAAAA,GAAAA,IAAH,yTAML,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,YAAYC,MAAxB,I,SCWpB,EAxBkB,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,UAAWC,EAA2C,EAA3CA,UAAWC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MAC7D,OACE,SAACZ,EAAD,CAAMa,GAAIL,EAAWM,MAAOL,EAA5B,UAEE,SAACN,EAAD,CACEY,MAAO,CAAEC,gBAAgB,OAAD,OAASN,EAAT,MAD1B,SAGGC,GAAeC,KAIvB,E,oBCZYK,EAAOhB,EAAAA,GAAAA,GAAH,+IAOJiB,EAAOjB,EAAAA,GAAAA,GAAH,gMC2BjB,EA1BmB,SAAC,GAA0B,IAAxBkB,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAC1B,OACI,SAACH,EAAD,UACKE,EAAOE,KAAI,YAAyC,IAAtCC,EAAqC,EAArCA,GAAiBC,EAAoB,EAAjCC,YAAqBZ,EAAY,EAAZA,MAC9Ba,EAAcF,EACdG,EAAAA,GAAAA,QAAAA,OACEA,EAAAA,GAAAA,YAAAA,GAA8BH,GAChCI,EAEN,OACI,SAACT,EAAD,WAEI,SAAC,EAAD,CACIV,UAAS,kBAAac,GACtBb,UAAW,CAAEmB,KAAMR,GACnBV,MAAOe,EACPd,aAAcY,EACdX,MAAOA,KAPJU,EAWlB,KAGZ,C,2FCPD,UApBa,WACT,OAA4BO,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAeW,EAAf,KACMV,GAAWW,EAAAA,EAAAA,MAMjB,IAJAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,MAAYC,MAAK,gBAAGC,EAAH,EAAGA,QAAH,OAAiBL,EAAUK,EAA3B,GACpB,GAAE,IAEEhB,EAAOiB,OAIZ,OACI,6BACI,eAAIrB,MAAO,CAACsB,cAAe,QAA3B,6BACA,SAAC,IAAD,CAAYlB,OAAQA,EAAQC,SAAUA,MAGjD,C,oOCtBYM,EAAgB,CACzBY,QAAS,6BACTC,YAAa,CAAC,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,aAG3DC,EAAS,mCAAG,sGAASC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,WAAYC,EAAhC,EAAgCA,MACxCC,EAAS,CACXC,QAAS,+BACTC,OAAQ,CACJC,QAXI,mCAYJJ,MAAAA,IALM,SASSK,IAAAA,IAAA,UAAaP,GAAb,OAAyBC,GAAcE,GAThD,uBASNK,EATM,EASNA,KATM,kBAUPA,GAVO,2CAAH,sDAaFhB,EAAY,WACrB,IAKMS,EAAa,IAAIQ,OAHL,QAGuB,IAFtB,QAInB,OAAOV,EAAU,CAAEC,UAPD,YAOYC,WAAAA,GACjC,EAEYS,EAAe,SAAA7B,GACxB,IACMoB,EAAU,WAAOpB,GAEvB,OAAOkB,EAAU,CAAEC,UAHD,SAGYC,WAAAA,GACjC,EAEYU,EAAkB,SAAAT,GAI3B,OAAOH,EAAU,CAAEC,UAHD,UAGYC,WAFd,SAE0BC,MAAAA,GAE7C,EAEYU,EAAsB,SAAA/B,GAC/B,IACMoB,EAAU,WAAOpB,EAAP,YAEhB,OAAOkB,EAAU,CAAEC,UAHD,SAGYC,WAAAA,GACjC,EAEYY,EAAsB,SAAAhC,GAC/B,IACMoB,EAAU,WAAOpB,EAAP,YAEhB,OAAOkB,EAAU,CAAEC,UAHD,SAGYC,WAAAA,GACjC,C","sources":["components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/Home.jsx","services/Api.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const Link = styled(NavLink)`\n    display: block;\n    border-radius: 10px;\n    text-decoration: none;\n    height: 100%;\n`;\n\nexport const CardWrapper = styled.div`\n    width: 100%;\n    height: 100%;\n    display: inline-flex;\n    justify-content: center;\n    align-items: flex-start;\n    font-weight: ${p => p.theme.fontWeights.medium};\n    padding: 16px;\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-position: center;\n    color: blueviolet;\n`;\n","import { PropTypes } from \"prop-types\";\nimport { Link, CardWrapper } from \"./MovieCard.styled\"\n\nconst MovieCard = ({ movieLink, stateLink, image, isNotPoster, title }) => {\n  return (\n    <Link to={movieLink} state={stateLink}\n    >\n      <CardWrapper\n        style={{ backgroundImage: `url(${image})` }}\n      >\n        {isNotPoster && title}\n      </CardWrapper>\n    </Link>\n  );\n};\n\nMovieCard.propTypes = {\n  movieLink: PropTypes.string.isRequired,\n  stateLink: PropTypes.exact({\n    from: PropTypes.objectOf(\n      PropTypes.string).isRequired\n  }).isRequired,\n  image: PropTypes.string.isRequired,\n  isNotPoster: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired\n}\n\nexport default MovieCard;","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 185px);\n    gap: 16px;\n    justify-content: center;\n`;\n\nexport const Item = styled.li`\n    height: 278px;\n    border-radius: 4px;\n    overflow: hidden;\n    box-shadow: 1px 3px 3px 1px #7A7A7A;\n\n    :hover {\n        transform: scale(1.025);\n    };\n`;\n","import MovieCard from \"components/MovieCard\";\nimport { POSTER_CONFIG } from \"services/Api\";\nimport defaultImage from 'default-movie-768x1129.jpg';\nimport { List, Item } from \"./MoviesList.styled\";\n\n// const POSTER_CONFIG = {\n//     baseUrl: \"http://image.tmdb.org/t/p/\",\n//     posterSizes: [\"w92\", \"w154\", \"w185\", \"w342\", \"w500\", \"w780\", \"original\"],\n// };\n\nconst MoviesList = ({ movies, location }) => {\n    return (\n        <List>\n            {movies.map(({ id, poster_path: poster, title }) => {\n                const moviePoster = poster\n                    ? POSTER_CONFIG.baseUrl.concat(\n                        POSTER_CONFIG.posterSizes[2], poster)\n                    : defaultImage;\n                \n                return (\n                    <Item key={id}\n                    >\n                        <MovieCard\n                            movieLink={`/movies/${id}`}\n                            stateLink={{ from: location }}\n                            image={moviePoster}\n                            isNotPoster={!poster}\n                            title={title}\n                        />\n                    </Item>\n                );\n            })}\n        </List>\n    );\n};\n\nexport default MoviesList;","import { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n// \nimport MoviesList from \"components/MoviesList\";\n// \nimport { getTrends } from \"services/Api\";\n\nconst Home = () => {\n    const [movies, setMovies] = useState([]);\n    const location = useLocation();\n\n    useEffect(() => {\n        getTrends().then(({ results }) => setMovies(results));\n    }, [])\n    \n    if (!movies.length) {\n        return ;\n    };\n\n    return (\n        <main>\n            <h1 style={{paddingBottom: '16px'}}>Tranding today</h1>\n            <MoviesList movies={movies} location={location} />\n        </main>\n    );\n};\n\nexport default Home;","import axios from 'axios';\nconst API_KEY = 'b282a22ae665f5f17a32a077013d243c';\n\nexport const POSTER_CONFIG = {\n    baseUrl: \"http://image.tmdb.org/t/p/\",\n    posterSizes: [\"w92\", \"w154\", \"w185\", \"w342\", \"w500\", \"w780\", \"original\"],\n};\n\nconst getMovies = async ({ queryType, pathParams, query }) => {\n    const config = {\n        baseURL: 'https://api.themoviedb.org/3', \n        params: {\n            api_key: API_KEY,\n            query\n        }\n    };\n    \n    const { data } = await axios.get(`${queryType}${pathParams}`, config);\n    return data;\n};\n\nexport const getTrends = () => {\n    const queryType = '/trending';\n\n    const mediaType = 'movie';\n    const timeWindow = 'week';\n\n    const pathParams = '/'.concat(mediaType, '/', timeWindow);\n\n    return getMovies({ queryType, pathParams });\n};\n\nexport const getMovieById = id => {\n    const queryType = '/movie';\n    const pathParams = `/${id}`;\n\n    return getMovies({ queryType, pathParams });\n};\n\nexport const getMovieByQuery = query => {\n    const queryType = '/search';\n    const pathParams = `/movie`;\n\n    return getMovies({ queryType, pathParams, query });\n\n};\n\nexport const getMovieCreditsById = id => {\n    const queryType = '/movie';\n    const pathParams = `/${id}/credits`;\n\n    return getMovies({ queryType, pathParams });\n};\n\nexport const getMovieReviewsById = id => {\n    const queryType = '/movie';\n    const pathParams = `/${id}/reviews`;\n\n    return getMovies({ queryType, pathParams });\n};\n\nexport const getApiConfig = () => {\n    const pathParams = '';\n\n    return getMovies({ queryType: '/configuration', pathParams });\n};\n"],"names":["Link","styled","NavLink","CardWrapper","p","theme","fontWeights","medium","movieLink","stateLink","image","isNotPoster","title","to","state","style","backgroundImage","List","Item","movies","location","map","id","poster","poster_path","moviePoster","POSTER_CONFIG","defaultImage","from","useState","setMovies","useLocation","useEffect","getTrends","then","results","length","paddingBottom","baseUrl","posterSizes","getMovies","queryType","pathParams","query","config","baseURL","params","api_key","axios","data","concat","getMovieById","getMovieByQuery","getMovieCreditsById","getMovieReviewsById"],"sourceRoot":""}