{"version":3,"file":"static/js/126.537c5b9a.chunk.js","mappings":"2PAEaA,EAAOC,EAAAA,GAAAA,GAAH,gHAOJC,EAASD,EAAAA,GAAAA,GAAH,uFAMNE,EAASF,EAAAA,GAAAA,GAAH,wBAGNG,EAAcH,EAAAA,GAAAA,KAAH,6CAIXI,EAAOJ,EAAAA,GAAAA,EAAH,kG,SCcjB,EA5BoB,SAAC,GAAiB,IAAfK,EAAc,EAAdA,QACnB,OACI,SAACN,EAAD,UAEQM,EAAQC,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACvB,OACI,UAACR,EAAD,YACI,UAACC,EAAD,YACI,SAACC,EAAD,uBAAoCK,MAExC,SAACJ,EAAD,UAAOK,MAJEF,EAMnB,KAIjB,E,UCmBD,EArCgB,WACZ,OAA8BG,EAAAA,EAAAA,UAAS,MAAvC,eAAOL,EAAP,KAAgBM,EAAhB,KACOC,GAAWC,EAAAA,EAAAA,MAAXD,QAMP,OAJAE,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAoBH,GAASI,MAAK,SAAAC,GAAI,OAAIN,EAAWM,EAAKC,QAApB,GACzC,GAAE,CAACN,IAECP,EAcAA,EAAQc,QAST,+BACI,SAAC,EAAD,CAAad,QAASA,OARtB,+BACI,uDAA6B,iBAAMe,MAAO,CAACC,MAAO,cAArB,qBAA7B,wBAfJ,SAAC,KAAD,CACIC,OAAO,KACPC,MAAM,KACNC,UAAU,uBACVC,aAAc,CAAC,EACfC,aAAa,uBACbC,YAAY,OACZC,SAAS,aAkBxB,C,oOCtCYC,EAAgB,CACzBC,QAAS,6BACTC,YAAa,CAAC,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,aAG3DC,EAAS,mCAAG,sGAASC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,WAAYC,EAAhC,EAAgCA,MACxCC,EAAS,CACXC,QAAS,+BACTC,OAAQ,CACJC,QAXI,mCAYJJ,MAAAA,IALM,SASSK,IAAAA,IAAA,UAAaP,GAAb,OAAyBC,GAAcE,GAThD,uBASNnB,EATM,EASNA,KATM,kBAUPA,GAVO,2CAAH,sDAaFwB,EAAY,WACrB,IAKMP,EAAa,IAAIQ,OAHL,QAGuB,IAFtB,QAInB,OAAOV,EAAU,CAAEC,UAPD,YAOYC,WAAAA,GACjC,EAEYS,EAAe,SAAApC,GACxB,IACM2B,EAAU,WAAO3B,GAEvB,OAAOyB,EAAU,CAAEC,UAHD,SAGYC,WAAAA,GACjC,EAEYU,EAAkB,SAAAT,GAI3B,OAAOH,EAAU,CAAEC,UAHD,UAGYC,WAFd,SAE0BC,MAAAA,GAE7C,EAEYU,EAAsB,SAAAtC,GAC/B,IACM2B,EAAU,WAAO3B,EAAP,YAEhB,OAAOyB,EAAU,CAAEC,UAHD,SAGYC,WAAAA,GACjC,EAEYnB,EAAsB,SAAAR,GAC/B,IACM2B,EAAU,WAAO3B,EAAP,YAEhB,OAAOyB,EAAU,CAAEC,UAHD,SAGYC,WAAAA,GACjC,C","sources":["components/ReviewsList/ReviewsList.styled.js","components/ReviewsList/ReviewsList.jsx","components/Reviews.jsx","services/Api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    padding-top: 16px;\n    margin-top: 8px;\n    \n    border-top: 1px solid #cccccc;\n`;\n\nexport const Review = styled.li`\n    :not(:first-of-type) {\n        margin-top: 24px;\n    };\n`;\n\nexport const Author = styled.h3`\n`;\n\nexport const AuthorTitle = styled.span`\n    color: #707070;\n`;\n\nexport const Text = styled.p`\n    margin-top: 16px;\n    padding-left: 16px;\n    padding-right: 16px;\n`;\n","import PropTypes from 'prop-types';\nimport { List, Author, AuthorTitle, Text, Review } from './ReviewsList.styled';\n\n// const POSTER_CONFIG = {\n//     baseUrl: \"http://image.tmdb.org/t/p/\",\n//     posterSizes: [\"w92\", \"w154\", \"w185\", \"w342\", \"w500\", \"w780\", \"original\"],\n// };\n\nconst ReviewsList = ({ reviews }) => {\n    return (\n        <List>\n            {\n                reviews.map(({ id, author, content }) => {\n                    return (\n                        <Review key={id}>\n                            <Author>\n                                <AuthorTitle>Author: </AuthorTitle>{author}\n                            </Author>\n                            <Text>{content}</Text>\n                        </Review>\n                )})\n            }\n        </List>\n    );\n};\n\nReviewsList.propTypes = {\n    reviews: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            author: PropTypes.string.isRequired,\n            content: PropTypes.string.isRequired,\n        }).isRequired,\n    ).isRequired,\n};\n\nexport default ReviewsList;\n\n","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieReviewsById} from \"services/Api\";\nimport ReviewsList from \"./ReviewsList\";\nimport { ProgressBar } from  'react-loader-spinner'\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState(null);\n    const {movieId} = useParams();\n    \n    useEffect(() => {\n        getMovieReviewsById(movieId).then(data => setReviews(data.results));\n    }, [movieId]);\n    \n    if (!reviews) {\n        return (\n            <ProgressBar\n                height=\"80\"\n                width=\"80\"\n                ariaLabel=\"progress-bar-loading\"\n                wrapperStyle={{}}\n                wrapperClass=\"progress-bar-wrapper\"\n                borderColor='navy'\n                barColor='orangered'\n            />\n        );\n    }\n\n    if (!reviews.length) {\n        return (\n            <>\n                <h3>Oop's! We don't have any <span style={{color: 'blueviolet'}}>reviews</span> for this movie</h3>\n            </>\n        );\n    };\n\n    return (\n        <>\n            <ReviewsList reviews={reviews} />\n        </>\n    );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nconst API_KEY = 'b282a22ae665f5f17a32a077013d243c';\n\nexport const POSTER_CONFIG = {\n    baseUrl: \"http://image.tmdb.org/t/p/\",\n    posterSizes: [\"w92\", \"w154\", \"w185\", \"w342\", \"w500\", \"w780\", \"original\"],\n};\n\nconst getMovies = async ({ queryType, pathParams, query }) => {\n    const config = {\n        baseURL: 'https://api.themoviedb.org/3', \n        params: {\n            api_key: API_KEY,\n            query\n        }\n    };\n    \n    const { data } = await axios.get(`${queryType}${pathParams}`, config);\n    return data;\n};\n\nexport const getTrends = () => {\n    const queryType = '/trending';\n\n    const mediaType = 'movie';\n    const timeWindow = 'week';\n\n    const pathParams = '/'.concat(mediaType, '/', timeWindow);\n\n    return getMovies({ queryType, pathParams });\n};\n\nexport const getMovieById = id => {\n    const queryType = '/movie';\n    const pathParams = `/${id}`;\n\n    return getMovies({ queryType, pathParams });\n};\n\nexport const getMovieByQuery = query => {\n    const queryType = '/search';\n    const pathParams = `/movie`;\n\n    return getMovies({ queryType, pathParams, query });\n\n};\n\nexport const getMovieCreditsById = id => {\n    const queryType = '/movie';\n    const pathParams = `/${id}/credits`;\n\n    return getMovies({ queryType, pathParams });\n};\n\nexport const getMovieReviewsById = id => {\n    const queryType = '/movie';\n    const pathParams = `/${id}/reviews`;\n\n    return getMovies({ queryType, pathParams });\n};\n\nexport const getApiConfig = () => {\n    const pathParams = '';\n\n    return getMovies({ queryType: '/configuration', pathParams });\n};\n"],"names":["List","styled","Review","Author","AuthorTitle","Text","reviews","map","id","author","content","useState","setReviews","movieId","useParams","useEffect","getMovieReviewsById","then","data","results","length","style","color","height","width","ariaLabel","wrapperStyle","wrapperClass","borderColor","barColor","POSTER_CONFIG","baseUrl","posterSizes","getMovies","queryType","pathParams","query","config","baseURL","params","api_key","axios","getTrends","concat","getMovieById","getMovieByQuery","getMovieCreditsById"],"sourceRoot":""}