{"version":3,"file":"static/js/902.df37f4c6.chunk.js","mappings":"2PAEaA,EAAOC,EAAAA,GAAAA,GAAH,qOAYJC,EAAQD,EAAAA,GAAAA,GAAH,yEAKLE,EAAWF,EAAAA,GAAAA,GAAH,8CAIRG,EAAMH,EAAAA,GAAAA,IAAH,+DAKHI,GAAQJ,EAAAA,EAAAA,IAAOG,EAAPH,CAAH,wD,mBCWlB,EA7BiB,SAAC,GAAc,IAAZK,EAAW,EAAXA,KAChB,OACI,SAACN,EAAD,UACKM,EAAKC,KAAI,YAAwD,IAArDC,EAAoD,EAApDA,GAAkBC,EAAkC,EAAhDC,aAA0BC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACvCC,EAAaC,EAAAA,GAAAA,QAAAA,OAA6BA,EAAAA,GAAAA,YAAAA,GAA8BL,GAE9E,OACI,2BACI,SAACP,EAAD,UAAQS,IACPF,GACK,SAACL,EAAD,CAAKW,IAAKF,EAAYG,IAAI,MAC1B,SAACX,EAAD,CAAOU,IAAKE,EAAcD,IAAI,MACpC,SAACb,EAAD,UAAWS,MALNJ,EAQhB,KAGZ,ECND,EAjBa,WACT,OAAwBU,EAAAA,EAAAA,UAAS,MAAjC,eAAOZ,EAAP,KAAaa,EAAb,KACOC,GAAWC,EAAAA,EAAAA,MAAXD,QAMP,IAJAE,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAoBH,GAASI,MAAK,SAAAC,GAAI,OAAIN,EAAQM,EAAKnB,KAAjB,GACzC,GAAE,CAACc,IAECd,EAEL,OACI,+BACI,SAAC,EAAD,CAAUA,KAAMA,KAG3B,C,oOCjBYQ,EAAgB,CACzBY,QAAS,6BACTC,YAAa,CAAC,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,aAG3DC,EAAS,mCAAG,sGAASC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,WAAYC,EAAhC,EAAgCA,MACxCC,EAAS,CACXC,QAAS,+BACTC,OAAQ,CACJC,QAXI,mCAYJJ,MAAAA,IALM,SASSK,IAAAA,IAAA,UAAaP,GAAb,OAAyBC,GAAcE,GAThD,uBASNP,EATM,EASNA,KATM,kBAUPA,GAVO,2CAAH,sDAaFY,EAAY,WACrB,IAKMP,EAAa,IAAIQ,OAHL,QAGuB,IAFtB,QAInB,OAAOV,EAAU,CAAEC,UAPD,YAOYC,WAAAA,GACjC,EAEYS,EAAe,SAAA/B,GACxB,IACMsB,EAAU,WAAOtB,GAEvB,OAAOoB,EAAU,CAAEC,UAHD,SAGYC,WAAAA,GACjC,EAEYU,EAAkB,SAAAT,GAI3B,OAAOH,EAAU,CAAEC,UAHD,UAGYC,WAFd,SAE0BC,MAAAA,GAE7C,EAEYR,EAAsB,SAAAf,GAC/B,IACMsB,EAAU,WAAOtB,EAAP,YAEhB,OAAOoB,EAAU,CAAEC,UAHD,SAGYC,WAAAA,GACjC,EAEYW,EAAsB,SAAAjC,GAC/B,IACMsB,EAAU,WAAOtB,EAAP,YAEhB,OAAOoB,EAAU,CAAEC,UAHD,SAGYC,WAAAA,GACjC,C","sources":["components/CastList/CastList.styled.js","components/CastList/CastList.jsx","components/Cast.jsx","services/Api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 185px);\n    gap: 16px;\n    justify-content: center;\n\n    padding-top: 16px;\n    margin-top: 8px;\n\n    border-top: 1px solid #cccccc;\n`;\n\nexport const Title = styled.h4`\n    color: blueviolet;\n    margin-bottom: 4px;\n`;\n\nexport const SubTitle = styled.h4`\n    margin-top: 4px;\n`;\n\nexport const Img = styled.img`\n    width: 133px;\n    height: 200px;\n`;\n\nexport const Patch = styled(Img)`\n    background-color: #cccccc;\n`;","import { PropTypes } from 'prop-types';\nimport { POSTER_CONFIG } from \"services/Api\";\nimport { List, Title, SubTitle, Img, Patch } from './CastList.styled';\nimport defaultImage from 'default-movie-768x1129.jpg';\n\n// const POSTER_CONFIG = {\n//     baseUrl: \"http://image.tmdb.org/t/p/\",\n//     posterSizes: [\"w92\", \"w154\", \"w185\", \"w342\", \"w500\", \"w780\", \"original\"],\n// };\n\nconst CastList = ({ cast }) => {\n    return (\n        <List>\n            {cast.map(({ id, profile_path: posterPath, name, character }) => {\n                const castPoster = POSTER_CONFIG.baseUrl.concat(POSTER_CONFIG.posterSizes[0], posterPath);\n\n                return (\n                    <li key={id}>\n                        <Title>{name}</Title>\n                        {posterPath\n                            ? <Img src={castPoster} alt=\"\" />\n                            : <Patch src={defaultImage} alt=\"\" />}\n                        <SubTitle>{character}</SubTitle>\n                    </li>\n                );\n            })}\n        </List>\n    );\n};\n\nCastList.propTypes = {\n    cast: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        profile_path: PropTypes.string,\n        name: PropTypes.string.isRequired,\n        character: PropTypes.string.isRequired,\n    }).isRequired).isRequired\n};\n\nexport default CastList;\n\n","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieCreditsById} from \"services/Api\";\nimport CastList from \"./CastList\";\n\nconst Cast = () => {\n    const [cast, setCast] = useState(null);\n    const {movieId} = useParams();\n\n    useEffect(() => {\n        getMovieCreditsById(movieId).then(data => setCast(data.cast));\n    }, [movieId]);\n\n    if (!cast) { return; };\n\n    return (\n        <>\n            <CastList cast={cast} />\n        </>\n    );\n};\n\nexport default Cast;\n","import axios from 'axios';\nconst API_KEY = 'b282a22ae665f5f17a32a077013d243c';\n\nexport const POSTER_CONFIG = {\n    baseUrl: \"http://image.tmdb.org/t/p/\",\n    posterSizes: [\"w92\", \"w154\", \"w185\", \"w342\", \"w500\", \"w780\", \"original\"],\n};\n\nconst getMovies = async ({ queryType, pathParams, query }) => {\n    const config = {\n        baseURL: 'https://api.themoviedb.org/3', \n        params: {\n            api_key: API_KEY,\n            query\n        }\n    };\n    \n    const { data } = await axios.get(`${queryType}${pathParams}`, config);\n    return data;\n};\n\nexport const getTrends = () => {\n    const queryType = '/trending';\n\n    const mediaType = 'movie';\n    const timeWindow = 'week';\n\n    const pathParams = '/'.concat(mediaType, '/', timeWindow);\n\n    return getMovies({ queryType, pathParams });\n};\n\nexport const getMovieById = id => {\n    const queryType = '/movie';\n    const pathParams = `/${id}`;\n\n    return getMovies({ queryType, pathParams });\n};\n\nexport const getMovieByQuery = query => {\n    const queryType = '/search';\n    const pathParams = `/movie`;\n\n    return getMovies({ queryType, pathParams, query });\n\n};\n\nexport const getMovieCreditsById = id => {\n    const queryType = '/movie';\n    const pathParams = `/${id}/credits`;\n\n    return getMovies({ queryType, pathParams });\n};\n\nexport const getMovieReviewsById = id => {\n    const queryType = '/movie';\n    const pathParams = `/${id}/reviews`;\n\n    return getMovies({ queryType, pathParams });\n};\n\nexport const getApiConfig = () => {\n    const pathParams = '';\n\n    return getMovies({ queryType: '/configuration', pathParams });\n};\n"],"names":["List","styled","Title","SubTitle","Img","Patch","cast","map","id","posterPath","profile_path","name","character","castPoster","POSTER_CONFIG","src","alt","defaultImage","useState","setCast","movieId","useParams","useEffect","getMovieCreditsById","then","data","baseUrl","posterSizes","getMovies","queryType","pathParams","query","config","baseURL","params","api_key","axios","getTrends","concat","getMovieById","getMovieByQuery","getMovieReviewsById"],"sourceRoot":""}